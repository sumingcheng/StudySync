
#include <STC12C5A.H>
#include <intrins.h>
 #define	uchar unsigned char
#define uint  unsigned int

sbit RS = P2^5 ;
sbit RW = P2^6 ;
sbit EN = P2^7 ;
sbit BUSY = P0^7;
float V = 0;
uchar VOT=0,test=0;
uint  L = 0;
uchar d[5];
 unsigned int i;
 unsigned int adc_value[13];        //AD转换缓冲区        
 unsigned int adc_value_ave=0;
 unsigned int max_value=0,min_value=0,max_index=1,min_index=1;
 unsigned int bodong_value=0;

 unsigned int j=0;

uchar code word1[] = {" Hello,Welcome"};//问候语
uchar code word2[] = {"              "};//显示其他
uchar code word3[] = {" The voltage is "};//显示电压语句
uchar code word4[] = {"      .   V "};  //显示温度符号


/*********************************************************************************************
函数名：毫秒级CPU延时函数
结  果：占用CPU方式延时与参数数值相同的毫秒时间
备  注：应用于1T单片机时i<600，应用于12T单片机时i<125
/*********************************************************************************************/
void DELAY_MS (unsigned int a)
{
	unsigned int i;
	while( --a != 0)
	{
		for(i = 0; i < 600; i++);
	}
}
/*********************************************************************************************/



/*********************************************************************************************
函数名：ADC初始化及8位A/D转换函数
参  数：取10位结果时，精度为0.488mV
返回值：10位ADC数据
结  果：读出指定ADC接口的A/D转换值，并返回数值
备  注：程序参考STC12C5A60S2数据手册，适合该系列单片机（必须使用STC12C5A.h头文件）
/*********************************************************************************************/
uint Read(uint CHA)
{
	uchar AD_FLAG = 0; //存储A/D转换标志；若在函数为定义此变量则不能得到连续变化的模拟量显示

/**********以下为ADC初始化程序****************************************************************/
	CHA &= 0x07; //选择ADC的8个接口中的一个（0000 0111 高5位清0）
	ADC_CONTR = 0x40; //ADC转换的速度,540个时钟周期转换一次
	_nop_();
	ADC_CONTR |= CHA; //选择A/D当前通道
	_nop_();
	ADC_CONTR |= 0x80; //启动A/D电源
	DELAY_MS(3); //延时3ms，使输入电压达到稳定

/**********以下为ADC执行程序******************************************************************/
	ADC_CONTR |= 0x08; //启动A/D转换
	_nop_(); 
	_nop_(); 
	_nop_(); 
	_nop_(); 
	while(AD_FLAG == 0) //等待A/D转换结束
	{
		AD_FLAG = (ADC_CONTR & 0x10); //测试A/D转换结束否（当A/D转换完成后，标志位置1）	
	}
	ADC_CONTR &= 0xe7; //清ADC_FLAG位, 关闭A/D转换
	return(ADC_RES*4+ADC_RESL); //返回A/D转换结果（10位）
}
/*********************************************************************************************/




/*********************************************************************************************
函数名：公式计算函数
调  用：transfer();
参  数：最大可测量与电源电压等大的电压
返回值：无
结  果：Vce=Vin/1024*Vcc,Vce为显示值，Vin为端口测得数字量，Vcc为电源电压
备  注：单位V，显示到小数点后三位
/*********************************************************************************************/
void transfer(void)
{
//	  V = Read(0x00)*4.687; //P1.0口模拟量转换，4.6875=4.8*1000/1024
	int a[8]; 
	int sum=0;
	int adc_avg;
	
    while(j<8)
	{
	  for (i=0;i<13;i++) //连续转换8次
                     {
                           adc_value[i] = Read(0x00)*4.8535; //将单次ADC转换结果放入缓冲区         
                             DELAY_MS (10);        //每次转换延迟时间
                     }
                for(i=1;i<13;i++) // 去掉第一次测量值
                {
                        adc_value_ave+=adc_value[i];        
                }
                adc_value_ave/=12; // 去掉一个值外的平均值                                                                           
                for(i=1;i<13;i++) // 计算最大值和最小值索引号 排序
                { //排序 最大值第1位 最小值最后1位
                        if(adc_value[i]>adc_value_ave)//大于平均值
                        {                                                  
                                if((adc_value[i]-adc_value_ave)>max_value)                                                                                 
                                {                                 
                                        max_value=adc_value[i];
                                        max_index=1;
                                }
                        }                
                        else  //小于平均值
                        {
                                if((adc_value_ave-adc_value[i])>min_value)
                                {
                                        min_value=adc_value_ave-adc_value[i];
                                        min_index=i;
                                }
                        }
                }
                adc_value_ave=0;        
                for(i=1;i<13;i++) // 计算去掉最大值和最小值后的总和
                {
                        if((i!=max_index)&&(i!=min_index))//去掉最大值和最小值
                        {
                                adc_value_ave+=adc_value[i];        
                        }
                }
                if(max_index!=min_index) // 如果测量值不同
                {
                        adc_value_ave/=10; // 计算平均值
                }
                else        // 如果测量值相同
                {
                        adc_value_ave/=11; // 计算平均值
                }
				a[j]= adc_value_ave;
				j++;
			}
				 if(j==8)
				 {
				   j=0;
				 }

			    for(i=0;i<8;i++)
               {
                    sum =sum+ a[i];//测量
					
               }
                    adc_avg=sum/8;              //求平均数

			  L=adc_avg; 
	          d[1] = L / 500;
	          L = L % 500;
	          d[2] = L / 50;
	          L = L % 50;
	          d[3] = L/ 5;
	          d[4] = L % 5;
			  VOT=d[1]*10+d[2];
			  SBUF=VOT;
			  while(!TI);
		      TI=0;

}
/*********************************************************************************************/




//*********************液晶显示程序**********************************************************

/**************** 等待繁忙标志  ***********************/
void wait(void)
{
	P0 = 0xFF;
	
	do
	{
		RS = 0;
		RW = 1;
		EN = 0;
		EN = 1;
	}while (BUSY == 1);
	EN = 0;
}

/*******************  写数据 ********************** */
void w_dat(uchar dat)
{
	wait();	  
	EN = 0;
	P0 = dat;
	RS = 1;
	RW = 0;
	EN = 1;
	EN = 0;
}

/*********************  写命令***********************/
void w_cmd(uchar cmd)
{
	wait();
	EN = 0;
	P0 = cmd;
	RS = 0;
	RW = 0;
	EN = 1;
	EN = 0;
}

/**************************  字符串到LCD ****************** */
void LcdShow(uchar x, uchar *p)
{
    uchar addr;
    if(x<8)
        addr = 0x80+x;
    else
        addr = 0xc0+(x-8);
	w_cmd(addr);
	while (*p != '\0')
	{
		w_dat(*p++);
		DELAY_MS(50);
	}
}

/**************************  发送数字到LCD ****************** */
void Lcd_number(uchar x,uchar dat)
{
    uchar addr;
    if(x<8)
        addr = 0x80+x;
    else
        addr = 0xc0+(x-8);
    w_cmd(addr);
    w_dat(dat);
}

/*******************************  初始化1602******************  */
void Init_LCD1602(void)
{
	w_cmd(0x38);  // 16*2显示，5*7点阵，8位数据接口
	w_cmd(0x0C);  // 显示器开、光标开、光标允许闪烁
	w_cmd(0x06);  // 文字不动，光标自动右移
	w_cmd(0x01);  // 清屏
}


void init_1()
{
	TMOD=0X20;
	TH1=0Xfd;
	TL1=0Xfd;
	TR1=1; 
	SM0=0;
	SM1=1;
	REN=1;
//	ES=1;
//	EA=1;		

}


//=============================== 主函数================================
main()
{
     
	 AUXR = 0x00;
	 P1M0 = 0xff; //将用于ADC测量对应的IO接口修改为高阻输入。
	 P1M1 = 0x00;
	 P1ASF = 0xff; //设置8路AD转换通道，将P1口模拟功能控制寄存器置1

	 Init_LCD1602();
	 LcdShow(0x00,word1); //开机提示，
  	DELAY_MS(1000);	
	 LcdShow(0x08,word2);
	  DELAY_MS(1000);	
    Init_LCD1602();
	 LcdShow(0x00,word3);
	 LcdShow(0x08,word4);
	 init_1();

	while (1)
	{
		  transfer();
		  test=2;
		  SBUF=2;
		  while(!TI);
		  TI=0;
		  Lcd_number(0x10,d[4]+'0');
			Lcd_number(0x0f,d[3]+'0');
			Lcd_number(0x0d,d[2]+'0');
      Lcd_number(0x0c,d[1]+'0');
      DELAY_MS(1000);	//每秒刷新一次
	}
} 